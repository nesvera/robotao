<?xml version="1.0" ?>
<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <arg name="robot_drop_point" default="1.48"/>       <!-- w.r.t to the center of axis Z of the torso-->

    <!-- Launch gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find robotao_gazebo)/world/maze_world.world"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find robotao_description)/urdf/robotao.urdf.xacro'"/>

    <!-- Spawn the robot in gazebo world -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner"
          respawn="false" output="screen"
          args="-urdf -model robotao -x 34.0 -y -19.14 -z 1.6 -Y 3.14 -param robot_description"/>

    <!-- Launch position controller of the robot -->
    <rosparam file="$(find robotao_gazebo)/config/position_controller.yaml" command="load"/>

    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="robotao" args="joint_state_controller
                                             left_hip_pitch_position
                                             right_hip_pitch_position
                                             left_hip_roll_position
                                             right_hip_roll_position
                                             left_hip_yaw_position
                                             right_hip_yaw_position
                                             left_knee_pitch_position
                                             right_knee_pitch_position
                                             left_ankle_pitch_position
                                             right_ankle_pitch_position
                                             left_ankle_roll_position
                                             right_ankle_roll_position" />

    <!-- Combine joint values -->
    <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
        <remap from="/joint_states" to="/robotao/joint_states"/>
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="true"/> 
        <remap from="/joint_states" to="/robotao/joint_states"/>
        <param name="rate" value="30"/>
        <rosparam param="source_list">["/robotao/joint_states"]</rosparam>
    </node>

    <!-- Show in Rviz -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find robotao_description)/rviz/robotao.rviz"/>

    <!-- Start node to publish the joystick state -->
    <node name="joystick_publisher" pkg="joy" type="joy_node"/>

    <!-- Start the script to convert the joystick input in velocity command -->
    <node name="joy_to_cmd" pkg="robotao_control" type="xbox_controller.py" />

    <!-- Start gait algorithm -->
    <node name="gait" pkg="robotao_control" type="robotao_gait.py" />


</launch>